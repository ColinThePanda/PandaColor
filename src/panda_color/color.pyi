from typing import Tuple, Iterable, Iterator, Union, overload

class Color:
    # --- Constructor ---
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg: Union["Color", str, Iterable[int]]) -> None: ...
    @overload
    def __init__(self, r: int, g: int, b: int) -> None: ...
    def __init__(self, *args) -> None: ...

    # === SINGLE COMPONENT ACCESS ===
    @property
    def r(self) -> int: ...
    @r.setter
    def r(self, value: int) -> None: ...
    @property
    def g(self) -> int: ...
    @g.setter
    def g(self, value: int) -> None: ...
    @property
    def b(self) -> int: ...
    @b.setter
    def b(self, value: int) -> None: ...

    # === COMMON SWIZZLES ===
    @property
    def rgb(self) -> Tuple[int, int, int]: ...
    @rgb.setter
    def rgb(self, value: Iterable[int]) -> None: ...

    # --- Immutable convenience methods ---
    def with_red(self, r: int) -> "Color": ...
    def with_green(self, g: int) -> "Color": ...
    def with_blue(self, b: int) -> "Color": ...

    # --- Conversion methods ---
    def to_hex(self) -> str: ...
    def to_tuple(self) -> Tuple[int, int, int]: ...
    def to_list(self) -> list[int]: ...
    def to_dict(self) -> dict[str, int]: ...
    def css_rgb(self) -> str: ...
    def css_rgba(self, alpha: float = 1.0) -> str: ...
    def normalized(self) -> Tuple[float, float, float]: ...
    @property
    def luminance(self) -> float: ...
    @property
    def ansi256(self) -> int: ...
    def color_text_foreground(self, text: str) -> str: ...
    def color_text_background(self, text: str) -> str: ...

    # --- Alternate constructors ---
    @classmethod
    def from_hex(cls, hex_string: str) -> "Color": ...
    @classmethod
    def from_normalized(cls, r: float, g: float, b: float) -> "Color": ...
    @classmethod
    def random(cls) -> "Color": ...

    # --- Sequence protocol ---
    def __iter__(self) -> Iterator[int]: ...
    def __getitem__(self, index: int) -> int: ...
    def __len__(self) -> int: ...

    # --- String representations ---
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

    # --- Equality & hashing ---
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
